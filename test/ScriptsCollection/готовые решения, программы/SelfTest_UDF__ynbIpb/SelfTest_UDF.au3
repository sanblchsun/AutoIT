; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Функция самопроверки целостности
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Func _SelfTest ($sPass)
	$hScriptFile = FileOpen (@ScriptFullPath, 16) ; сначала открываем сами себя для чтения в бинаром режиме
	$bScriptFile = FileRead ($hScriptFile) ; читаем себя целиком в переменную
	FileClose ($hScriptFile) ; закрываем файл
	$iScriptFileLen = BinaryLen ($bScriptFile) ; подсчитываем количество прочитанных байт
	$bScriptFileOrig = BinaryMid ($bScriptFile, 1, $iScriptFileLen - 20) ; выбираем все байты сначала кроме 20-ти последних
	$bMd5file =  _MD5($bScriptFileOrig) ; получаем MD5 хэш файла
	$bSignature = BinaryMid ($bScriptFile, $iScriptFileLen - 19, 4) ; выбираем отдельно из последних 20-ти байт 4 сначала
	If $bSignature <> Binary ("0x004D4435") Then Return 2 ; Если Эти 4 байта не равны сигнатуре, то возвращаемся из функции с цифрой 2
	$bHash = BinaryMid ($bScriptFile, $iScriptFileLen - 15, 16) ; выбираем последние 16 байт, зашифрованный хэш
	$bHash = _XXTEA_Decrypt($bHash, $sPass) ; расшифровываем хэш
	If $bMd5file = $bHash Then ; сравниваем полученый хэш и расшифрованный
		Return 1 ; если они равны возвращаем 1
	Else
		Return 0 ; если неравны возвращаем 0
	EndIf
EndFunc ;==> _SelfTest

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Функция вычисления MD5 хэша
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~
Func _MD5($Data)
	Local $_MD5Opcode = '0x
		$_MD5Opcode
		$_MD5Opcode &= '45F850E8510000008B4310C1E80383E03F8945F483F838730B6A38582B45F48945F0EB096A78582B45F48945F0FF75F0FF75ECFF750CE831F8FFFF6A088D45F850FF750CE823F8FFFF6A1053FF7508E8050000005BC9C210005589E55156578B7D088B750C8B4D10FCF3A45F5E595DC20C00'
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($_MD5Opcode) & "]")
	DllStructSetData($CodeBuffer, 1, $_MD5Opcode)

	Local $Input = DllStructCreate("byte[" & BinaryLen($Data) & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Digest = DllStructCreate("byte[16]")

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer), _
													"ptr", DllStructGetPtr($Input), _
													"int", BinaryLen($Data), _
													"ptr", DllStructGetPtr($Digest), _
													"int", 0)

	Local $Ret = DllStructGetData($Digest, 1)
	$Input = 0
	$Digest = 0
	$CodeBuffer = 0
	Return $Ret
EndFunc ;==> _MD5

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Функция шифрования алгоритмом  XXTEA
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Func _XXTEA_Encrypt($Data, $Key)
	$Data = Binary($Data)
	Local $DataLen = BinaryLen($Data)
	If $DataLen = 0 Then 
		Return ""
	ElseIf $DataLen < 8 Then
		$DataLen = 8
	EndIf	
	
	Local $Opcode = '0x
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]")
	DllStructSetData($CodeBuffer, 1, $Opcode)

	Local $V = DllStructCreate("byte[" & Ceiling($DataLen / 4) * 4 & "]")
	DllStructSetData($V, 1, $Data)

	Local $K = DllStructCreate("byte[16]")
	DllStructSetData($K, 1, $Key)

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer), _
													"ptr", DllStructGetPtr($V), _
													"int", Ceiling($DataLen / 4), _
													"ptr", DllStructGetPtr($K), _
													"int", 0)

	Local $Ret = DllStructGetData($V, 1)
	$CodeBuffer = 0
	$V = 0
	$K = 0
	Return $Ret
EndFunc ;==> _XXTEA_Encrypt

; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Функция расшифровки алгоритмом  XXTEA
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Func _XXTEA_Decrypt($Data, $Key)
	$Data = Binary($Data)
	Local $DataLen = BinaryLen($Data)
	If $DataLen = 0 Then Return ""

	Local $Opcode = '0x
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]")
	DllStructSetData($CodeBuffer, 1, $Opcode)

	Local $V = DllStructCreate("byte[" & Ceiling($DataLen / 4) * 4 & "]")
	DllStructSetData($V, 1, $Data)

	Local $K = DllStructCreate("byte[16]")
	DllStructSetData($K, 1, $Key)

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer), _
													"ptr", DllStructGetPtr($V), _
													"int", Ceiling($DataLen / 4), _
													"ptr", DllStructGetPtr($K), _
													"int", 0)

	Local $Ret = DllStructGetData($V, 1)
	$CodeBuffer = 0
	$V = 0
	$K = 0
	Return $Ret
EndFunc ;==> _XXTEA_Decrypt
; -----------------------------------------------------------------------------
; SHABAL_TINY Hash Machine Code UDF
; Purpose: Provide The Machine Code Version of SHABAL Hash Algorithm In AutoIt
; Author: Ward
; -----------------------------------------------------------------------------

#Include-once
#Include <Memory.au3>

Global $_SHABAL_TINY_CodeBuffer, $_SHABAL_TINY_CodeBufferMemory
Global $_SHABAL_TINY_InitOffset, $_SHABAL_TINY_InputOffset, $_SHABAL_TINY_ResultOffset

Func _SHABAL_TINY_Exit()
	$_SHABAL_TINY_CodeBuffer = 0
	_MemVirtualFree($_SHABAL_TINY_CodeBufferMemory, 0, $MEM_RELEASE)
EndFunc

Func _SHABAL_TINY_Startup()
	If Not IsDllStruct($_SHABAL_TINY_CodeBuffer) Then
		If @AutoItX64 Then
			Local $Opcode = '0x
		Else
			Local $Opcode = '0x
		EndIf
		$_SHABAL_TINY_InitOffset = (StringInStr($Opcode, "89DB") - 3) / 2
		$_SHABAL_TINY_InputOffset = (StringInStr($Opcode, "87DB") - 3) / 2
		$_SHABAL_TINY_ResultOffset = (StringInStr($Opcode, "09DB") - 3) / 2
		$Opcode = Binary($Opcode)

		$_SHABAL_TINY_CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
		$_SHABAL_TINY_CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $_SHABAL_TINY_CodeBufferMemory)
		DllStructSetData($_SHABAL_TINY_CodeBuffer, 1, $Opcode)
		OnAutoItExitRegister("_SHABAL_TINY_Exit")
	EndIf
EndFunc

Func _SHABAL_TINYInit($Size = 512)
	$Size = Floor($Size / 32) * 32
	If $Size < 32 Then $Size = 32
	If $Size > 512 Then $Size = 512
	If Not IsDllStruct($_SHABAL_TINY_CodeBuffer) Then _SHABAL_TINY_Startup()

	Local $Context = DllStructCreate("byte buf[64]; ptr ptr; uint state[44]; uint W[2]; uint out_size")
	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_SHABAL_TINY_CodeBuffer) + $_SHABAL_TINY_InitOffset, _
													"ptr", DllStructGetPtr($Context), _
													"int", $Size, _
													"int", 0, _
													"int", 0)

	Return $Context
EndFunc


Func _SHABAL_TINYInput(ByRef $Context, $Data)
	If Not IsDllStruct($_SHABAL_TINY_CodeBuffer) Then _SHABAL_TINY_Startup()
	If Not IsDllStruct($Context) Then Return SetError(1, 0, 0)

	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)
	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_SHABAL_TINY_CodeBuffer) + $_SHABAL_TINY_InputOffset, _
													"ptr", DllStructGetPtr($Context), _
													"ptr", DllStructGetPtr($Input), _
													"uint", $InputLen, _
													"int", 0)
EndFunc


Func _SHABAL_TINYResult(ByRef $Context)
	If Not IsDllStruct($_SHABAL_TINY_CodeBuffer) Then _SHABAL_TINY_Startup()
	If Not IsDllStruct($Context) Then Return SetError(1, 0, "")

	Local $Digest = DllStructCreate("byte[" & (DllStructGetData($Context, "out_size") / 8) & "]")

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_SHABAL_TINY_CodeBuffer) + $_SHABAL_TINY_ResultOffset, _
													"ptr", DllStructGetPtr($Context), _
													"ptr", DllStructGetPtr($Digest), _
													"int", 0, _
													"int", 0)
	Return DllStructGetData($Digest, 1)
EndFunc


Func _SHABAL_TINY($Data, $Size = 512)
	Local $Context = _SHABAL_TINYInit($Size)
	_SHABAL_TINYInput($Context, $Data)
	Return _SHABAL_TINYResult($Context)
EndFunc

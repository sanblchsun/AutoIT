; -----------------------------------------------------------------------------
; MD2 Hash Machine Code UDF
; Purpose: Provide The Machine Code Version of MD2 Hash Algorithm In AutoIt
; Author: Ward
; -----------------------------------------------------------------------------

#Include-once
#Include <Memory.au3>

Global $_MD2_CodeBuffer, $_MD2_CodeBufferMemory
Global $_MD2_InitOffset, $_MD2_InputOffset, $_MD2_ResultOffset

Global $_HASH_MD2[4] = [16, 212, '_MD2_', '_MD2_']

Func _MD2_Exit()
	$_MD2_CodeBuffer = 0
	_MemVirtualFree($_MD2_CodeBufferMemory, 0, $MEM_RELEASE)
EndFunc

Func _MD2_Startup()
	If Not IsDllStruct($_MD2_CodeBuffer) Then
		If @AutoItX64 Then
			Local $Opcode = '0x
		Else
			Local $Opcode = '0x
		EndIf
		$_MD2_InitOffset = (StringInStr($Opcode, "89DB") - 3) / 2
		$_MD2_InputOffset = (StringInStr($Opcode, "87DB") - 3) / 2
		$_MD2_ResultOffset = (StringInStr($Opcode, "09DB") - 3) / 2
		$Opcode = Binary($Opcode)

		$_MD2_CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
		$_MD2_CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $_MD2_CodeBufferMemory)
		DllStructSetData($_MD2_CodeBuffer, 1, $Opcode)
		OnAutoItExitRegister("_MD2_Exit")
	EndIf
EndFunc

Func _MD2Init()
	If Not IsDllStruct($_MD2_CodeBuffer) Then _MD2_Startup()

	Local $Context = DllStructCreate("byte[" & $_HASH_MD2[1] & "]")
	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_MD2_CodeBuffer) + $_MD2_InitOffset, _
													"ptr", DllStructGetPtr($Context), _
													"int", 0, _
													"int", 0, _
													"int", 0)

	Return $Context
EndFunc

Func _MD2Input(ByRef $Context, $Data)
	If Not IsDllStruct($_MD2_CodeBuffer) Then _MD2_Startup()
	If Not IsDllStruct($Context) Then Return SetError(1, 0, 0)

	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)
	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_MD2_CodeBuffer) + $_MD2_InputOffset, _
													"ptr", DllStructGetPtr($Context), _
													"ptr", DllStructGetPtr($Input), _
													"uint", $InputLen, _
													"int", 0)
EndFunc

Func _MD2Result(ByRef $Context)
	If Not IsDllStruct($_MD2_CodeBuffer) Then _MD2_Startup()
	If Not IsDllStruct($Context) Then Return SetError(1, 0, "")

	Local $Digest = DllStructCreate("byte[" & $_HASH_MD2[0] & "]")
	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($_MD2_CodeBuffer) + $_MD2_ResultOffset, _
													"ptr", DllStructGetPtr($Context), _
													"ptr", DllStructGetPtr($Digest), _
													"int", 0, _
													"int", 0)
	Return DllStructGetData($Digest, 1)
EndFunc

Func _MD2($Data)
	Local $Context = _MD2Init()
	_MD2Input($Context, $Data)
	Return _MD2Result($Context)
EndFunc

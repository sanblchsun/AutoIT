; -----------------------------------------------------------------------------
; QuickLZ Compression Machine Code UDF
; Purpose: Provide The Machine Code Version of QuickLZ Algorithm In AutoIt
; Author: Ward
; QuickLZ Copyright (C) 2006-2009 Lasse Mikkel Reinhold
; -----------------------------------------------------------------------------

#Include-once
#Include <Memory.au3>

Global $_QLZ_CodeBuffer, $_QLZ_CodeBufferMemory
Global $_QLZ_Compress, $_QLZ_Decompress, $_QLZ_Compress2, $_QLZ_Decompress2, $_QLZ_CompressLen, $_QLZ_DecompressLen

Func _QLZ_Exit()
	$_QLZ_CodeBuffer = 0
	_MemVirtualFree($_QLZ_CodeBufferMemory, 0, $MEM_RELEASE)
EndFunc

Func _QLZ_Startup()
	If Not IsDllStruct($_QLZ_CodeBuffer) Then
		If @AutoItX64 Then
			Local $Code = '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'
				$Code &= 'wmOQ5wcxCMcYicQs54gpTIwsSiRTFxiWFin1/Dkl73eE5/8I+BDFIP0S1XZLJjpeXCIPM+E25hyc7g3P6QmnMfGlvibqEjnhgVF5JDikSAtqhk0hSt6eNXcAgTSOSokUFPNEiBqFd7VSzNgMMIZACsKJOlTasAwpimFRxzBv1dCzpCfJFBBDOCDpQMpoidUB5v4ZCpn9KAJIhSeSGTd6EsIG1B3xztExeC8GggeJgwUIozh3QwE9xk1oyMO6QWLqT2lIZe25+JhzYbzrA89E2j+nO4OSz0KjALzoCTH4Ur+6S1GPuECJjP1AUkghz5xxMnTTg4A8hwqiFPuIGEB3wOuBkf8yUApznYTDcqMIwpD53qBGuZLKlg2B7JgxppjAEeBOEnrSpOgsjulOASio8IqHj9G8T/iID4cnkwQUsMkqysuz6sJGBZa6cXiCNMjGgAhMCoOUJIDQCiSMFZRpffFIZkFkvAuA5cSKXAHRh0WII3wKWBgNLmAhTrIKd9XBCsUEmUSAJLCZUKbNnIMgiiiVAk5VhDiUvLygR1ZIDSxktTOW6Gd1jGiVi3THoN8D91mFlDFwYyZoeAUiuf+M61K4/yYp0EQd471MaXJRPRSfjuBED03JgpUNWGdECUXm45ZqkAdiUN5DQHSEN6rkG5eiiOkfTDQmwQ3gBYB8FrGgugcIYXz+KP+8rYOi6osQYJDigeU9KEjoNqcjhBJQA7kg7kE6UvOfWkxmqW2VML0Enj+4Lbqe2YGjdO0I8tDEUC26HpBhqPQ8AjpAOmZz6j2q81DyawgwBncEJG1Cc1dB1XLTVVEMnQOpsFFNq6GGESiXkCEVAkOIw5MMSx9j0UhsNmKAgUzm8ViAaTLCRAlBZ/VzPwLjBUQLXIuIDlVJ+EicCctIZgMnXYKUxQJixgD/YA+C/cxp9rIsuqdotmUWB3BzKXtAlyuEm2Ka6haUyZBt5Pl/BT0pyEnJEY+pNIt3FdfgXXCJgAStDeIoTIgNjUUEeAKbUOiO6UialySLA0cJ4KkxRgZzLi1cJjr7N4DbQwOQTEBChWgxqZ4Y+RSGJ4m4ImUT6wUCN/l2D6P6iccQUiw7dOR0Gew5yEbAqnfFSVxE1EKFhb4WFBBMBx0xydFlVHECsVqKiEX5TxIkL2f91QNWhxKFVnVThxmOKpQzlVAV2pnxk5xn24Ss3atx+vZusNbeHAeWYgrC7OIV6DxAo9oHdz9BizL38l/3EMWAWBMu6s+fylC5nhPyFj5gFrQXCIhJIU/xFuUCyQyRToC/zwhAiKQXiakSCXEo96QAiBByUEFc9vQadJjRkk5kQ0wgySfMkWWJ6U2m9jdrBSOCUIafIGx16arwlvXw4UkQ8VfwCwPpC5obCMVViHUOol5W9/wSK6xk4yHmgckjwxYIuNZKeHf9sE/k6KEaeEeHVwULa0zUCaqU6bRPjXgDQGZrfrZXZ3QaERboylM+lCPwkVFCGi6AdiyGF8Qlz9ppTV8sBFq6E3V8Xgqcdl+xrMYoEEjKrxCX/FxPMYkWthxD2zqgEnToNOmDKY0n6eo810ZaTijX8IwX64xIcshM5VY0VDHx6B5c9nie12gcCekqohi5BIYKJL9PVgzSzwbWlGw/A/OkX17DAAA='
		Else
			Local $Code = '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'
				$Code &= 'DbIJMXLR+L6kxsS+/wekD5RIC1OFIdaQS400jgI5x4kEs4iQFHfEuIqWV+kHn1FLGVsgQnwEk7jrCf0Stc5mI0I+TG000L+yarZ56MqcbML5/hoDno161DvRnGJtOfi5oXUQjUX9LOmr9sYgXiR5AgSp5grp52I6Sf/IRJFMTzZrQTgI6C0GEW+IGSNbpIkxPIO0st8oPGYnicUv5Ul0xuOwgE7uLOPBgf4J4AS+jPsLz/Cph8zf5M+QxIH26gH6v0n0LOuQ9sSMEzPPCaONPJfI+7uIpBSglOlGTv9w+oHsjLNXEaiJrM39iHIEZKguKXjwkQTwrCSgnPxkpGJ4xErCF4AB6snrcEauuJBjCccEOdXBQDRpviRASr3mCVw/YmjgkQLmH4aNykRwPsKJXMBx0ei4F4heg+9lBH1sSYR0L2AXKNwpGOg9/g9/B5kVNCmQWo1N/rq/aTxcRvihKgnM6A0xMccZPDOJKYHnMCuEOEUEEYVYiGXROEE24CA+83SNAvNgLcuKRHBswxGdMCQzEGMnKUkErrHyDAlIA7oQejpN8Z9YUCa2YDyNBL3QOB1AuECxy0iGgGCNdIEEuaIaIdEo6xci7RPGBBzK6v1nHHyLCmK9JjtoseA5AhMeGIZEFbgEEyl108IFMwOpH3tMxjmAWCV2wCxh7IZFEJ5Qe7PVHPwg+DpFxi6F+YP239JvCGUKOoYHOlwFdEwJ/ZLRXe2JvTNQeIZodan+lGSPtniCEwo6hYVgicJQhchC2FD+A6DbuIlRbMYWE5nm+gkCiIQ5E0A1kKj5kGo4AdWW1ztPZWEE1IoBULADNMHnBQsxnmSClfiBvQnHZok7IFUC65o1OWqF/IIi//ZSeaEKRrFnK3RzYCroxPE0K5n63mQsAcLB+gUp0DnYD48lPgKRMTiTRVwpKiEmONqGiQEzUDSgBKJ5Wl3ez4npzWBQMdLuWpnbCbZFhknFTEFUMWA4A8o4h0aJI6J8Gf98pLV4Ru8xUHCf8buSPVFZmG84pTCDXOkqlMoTZNEP38FO095xKyw7iV4odwUvdSX1gpjweCKaokDo+Iwm8CV2x7ToQiH38NWYoUiHVD+77OVg8xKInAc0T2eh7DpB60iBcihk9qYzdJdJXBTagcrlgo1IBNn/DBe6HUC2GMsFt3xjvWDKReTUgapcbGuR2Anp7/4a1pSK7uIFEAnXiTjjPWQ8diWUlzS3IjM4RpA3dQ5ruQVaqAKA+onHQxAJHVyBzxlnOAgrwAh8g/gJfS0FuKRIAwZ4OwmhxqLC2UVv8dTTH4u8VqTYQRchiUcQqIhXRKQwSIHEuZUlTrmKk0BvhomxUKDyfLKwav51VH6lLDHrDiIMEPxMFbKMKIb8vbonBtpy6+l6GZkMT6kZKPRaY4gRkkF4pVWccfRZAjLrjY085fwXjGa73OVS+QhK14ddPMLoHNE2rO4L0gOwl+kvkl8ougQKYxLRVlclZQwEmBDQHBSFyfIvWPxBAghyJ/fHk/nwAqRJ3RRhBAVmpccu+VCQzwrzXd/RDuED5qTrFuhfMF7DAA=='
		EndIf
		Local $Opcode = String(_QuickLZ_CodeDecompress($Code))
		$_QLZ_Compress = (StringInStr($Opcode, "89C0") - 3) / 2
		$_QLZ_Decompress = (StringInStr($Opcode, "89DB") - 3) / 2
		$_QLZ_Compress2 = (StringInStr($Opcode, "89F6") - 3) / 2
		$_QLZ_Decompress2 = (StringInStr($Opcode, "89FF") - 3) / 2
		$_QLZ_CompressLen = (StringInStr($Opcode, "89C9") - 3) / 2
		$_QLZ_DecompressLen = (StringInStr($Opcode, "89D2") - 3) / 2
		$Opcode = Binary($Opcode)

		$_QLZ_CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
		$_QLZ_CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $_QLZ_CodeBufferMemory)
		DllStructSetData($_QLZ_CodeBuffer, 1, $Opcode)
		OnAutoItExitRegister("_QLZ_Exit")
	EndIf
EndFunc

Func _QuickLZ_DecompressLen($Data)
	If Not IsDllStruct($_QLZ_CodeBuffer) Then _QLZ_Startup()

	$Data = Binary($Data)
	Local $Input = DllStructCreate("byte[" & BinaryLen($Data) & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_QLZ_CodeBuffer) + $_QLZ_DecompressLen, _
													"ptr", DllStructGetPtr($Input), _
													"int", 0, _
													"int", 0, _
													"int", 0)
	Return $Ret[0]
EndFunc

Func _QuickLZ_CompressLen($Data)
	If Not IsDllStruct($_QLZ_CodeBuffer) Then _QLZ_Startup()

	$Data = Binary($Data)
	Local $Input = DllStructCreate("byte[" & BinaryLen($Data) & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_QLZ_CodeBuffer) + $_QLZ_CompressLen, _
													"ptr", DllStructGetPtr($Input), _
													"int", 0, _
													"int", 0, _
													"int", 0)
	Return $Ret[0]
EndFunc

#cs
	The destination buffer must be at least size + 400 bytes large because incompressible data may increase in size.
#ce
Func __QuickLZ_Compress_Core(ByRef $Data, $Offset, $BufferSize)
	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Output = DllStructCreate("byte[" & ($InputLen + 400) & "]")
	Local $Buffer = DllStructCreate("byte[" & $BufferSize & "]")

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_QLZ_CodeBuffer) + $Offset, _
													"ptr", DllStructGetPtr($Input), _
													"ptr", DllStructGetPtr($Output), _
													"uint", $InputLen, _
													"ptr", DllStructGetPtr($Buffer))

	Return BinaryMid(DllStructGetData($Output, 1), 1, $Ret[0])
EndFunc

Func __QuickLZ_Decompress_Core(ByRef $Data, $Offset, $BufferSize)
	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)


	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_QLZ_CodeBuffer) + $_QLZ_DecompressLen, _
													"ptr", DllStructGetPtr($Input), _
													"int", 0, _
													"int", 0, _
													"int", 0)

	Local $Output = DllStructCreate("byte[" & $Ret[0] & "]")
	Local $Buffer = DllStructCreate("byte[" & $BufferSize & "]")

	$Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_QLZ_CodeBuffer) + $Offset, _
													"ptr", DllStructGetPtr($Input), _
													"ptr", DllStructGetPtr($Output), _
													"ptr", DllStructGetPtr($Buffer), _
													"int", 0)

	Return BinaryMid(DllStructGetData($Output, 1), 1, $Ret[0])
EndFunc


Func _QuickLZ_Compress($Data, $Level = 1)
	If Not IsDllStruct($_QLZ_CodeBuffer) Then _QLZ_Startup()

	If $Level = 1 Then
		Return Binary("0x01") & __QuickLZ_Compress_Core($Data, $_QLZ_Compress, 36872)
	Else
		Return Binary("0x02") & __QuickLZ_Compress_Core($Data, $_QLZ_Compress2, 67592)
	EndIf
EndFunc

Func _QuickLZ_Decompress($Data)
	If Not IsDllStruct($_QLZ_CodeBuffer) Then _QLZ_Startup()

	$Data = Binary($Data)
	Local $Level = Int(BinaryMid($Data, 1, 1))
	If $Level = 1 Then
		Return __QuickLZ_Decompress_Core(BinaryMid($Data, 2), $_QLZ_Decompress, 36872)
	Else
		Return __QuickLZ_Decompress_Core(BinaryMid($Data, 2), $_QLZ_Decompress2, 67592)
	EndIf
EndFunc

Func _QuickLZ_CodeDecompress($Code)
	If @AutoItX64 Then
		Local $Opcode = '0x
	Else
		Local $Opcode = '0x
	EndIf
	Local $AP_Decompress = (StringInStr($Opcode, "89C0") - 3) / 2
	Local $B64D_Init = (StringInStr($Opcode, "89D2") - 3) / 2
	Local $B64D_DecodeData = (StringInStr($Opcode, "89F6") - 3) / 2
	$Opcode = Binary($Opcode)

	Local $CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $CodeBufferMemory)
	DllStructSetData($CodeBuffer, 1, $Opcode)

	Local $B64D_State = DllStructCreate("byte[16]")
	Local $Length = StringLen($Code)
	Local $Output = DllStructCreate("byte[" & $Length & "]")

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $B64D_Init, _
													"ptr", DllStructGetPtr($B64D_State), _
													"int", 0, _
													"int", 0, _
													"int", 0)

	DllCall("user32.dll", "int", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $B64D_DecodeData, _
													"str", $Code, _
													"uint", $Length, _
													"ptr", DllStructGetPtr($Output), _
													"ptr", DllStructGetPtr($B64D_State))

	Local $ResultLen = DllStructGetData(DllStructCreate("uint", DllStructGetPtr($Output)), 1)
	Local $Result = DllStructCreate("byte[" & ($ResultLen + 16) & "]")

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $AP_Decompress, _
													"ptr", DllStructGetPtr($Output) + 4, _
													"ptr", DllStructGetPtr($Result), _
													"int", 0, _
													"int", 0)


	_MemVirtualFree($CodeBufferMemory, 0, $MEM_RELEASE)
	Return BinaryMid(DllStructGetData($Result, 1), 1, $Ret[0])
EndFunc

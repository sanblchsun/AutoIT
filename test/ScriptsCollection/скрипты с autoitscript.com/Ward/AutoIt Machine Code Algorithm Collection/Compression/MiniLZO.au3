; -----------------------------------------------------------------------------
; MiniLZO Compression Machine Code UDF
; Purpose: Provide The Machine Code Version of MiniLZO Algorithm In AutoIt
; Author: Ward
; MiniLZO Copyright (C) 1996-2008 Markus Franz Xaver Johannes Oberhumer
; -----------------------------------------------------------------------------

#Include-once
#Include <Memory.au3>

Global $_MiniLZO_CodeBuffer, $_MiniLZO_CodeBufferMemory
Global $_MiniLZO_Compress, $_MiniLZO_Decompress

Func _MiniLZO_Exit()
	$_MiniLZO_CodeBuffer = 0
	_MemVirtualFree($_MiniLZO_CodeBufferMemory, 0, $MEM_RELEASE)
EndFunc

Func _MiniLZO_Startup()
	If Not IsDllStruct($_MiniLZO_CodeBuffer) Then
		If @AutoItX64 Then
			Local $Code = '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'
				$Code &= 'CznRADQRdAgZ9UKI/EIUhR6LyQjWLQpiBX+E/wn+KcTpwAA='
		Else
			Local $Code = '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'
				$Code &= 'O1VIenZYmGvSlglqCIFYCyndIBkHjO8ayAd4ie+RG8kAlTnPdDMuge9/Qena/im/KhjY01dIGVQ0wMcWmKS1RFLDhln3lFGBme/8TK80ug9RCtNwzwQWdAgZBBTi/NUHgA0UidCcYAxdwwA='
 		EndIf
		Local $Opcode = String(_MiniLZO_CodeDecompress($Code))
		$_MiniLZO_Compress = (StringInStr($Opcode, "89C0") - 3) / 2
		$_MiniLZO_Decompress = (StringInStr($Opcode, "89DB") - 3) / 2
		$Opcode = Binary($Opcode)

		$_MiniLZO_CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
		$_MiniLZO_CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $_MiniLZO_CodeBufferMemory)
		DllStructSetData($_MiniLZO_CodeBuffer, 1, $Opcode)
		OnAutoItExitRegister("_MiniLZO_Exit")
	EndIf
EndFunc

Func _MiniLZO_Compress_Core($Data)
	If Not IsDllStruct($_MiniLZO_CodeBuffer) Then _MiniLZO_Startup()

	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)

	Local $OutputLen = $InputLen + 1024
	Local $Output = DllStructCreate("byte[" & $OutputLen & "]")
	Local $Buffer = DllStructCreate("byte[131072]")

	Local $Ptr = DllStructCreate("ptr src; ptr dst; ptr buf")
	DllStructSetData($Ptr, 'src', DllStructGetPtr($Input))
	DllStructSetData($Ptr, 'dst', DllStructGetPtr($Output))
	DllStructSetData($Ptr, 'buf', DllStructGetPtr($Buffer))

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_MiniLZO_CodeBuffer) + $_MiniLZO_Compress, _
													"ptr", DllStructGetPtr($Ptr), _
													"uint", $InputLen, _
													"uint*", $OutputLen, _
													"int", 0)


	Return BinaryMid(DllStructGetData($Output, 1), 1, $Ret[4])
EndFunc

Func _MiniLZO_Decompress_Core($Data, $MaxBuffer)
	If Not IsDllStruct($_MiniLZO_CodeBuffer) Then _MiniLZO_Startup()

	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Local $Input = DllStructCreate("byte[" & $InputLen & "]")
	DllStructSetData($Input, 1, $Data)

	Local $Output = DllStructCreate("byte[" & $MaxBuffer & "]")

	$Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($_MiniLZO_CodeBuffer) + $_MiniLZO_Decompress, _
													"ptr", DllStructGetPtr($Input), _
													"uint", $InputLen, _
													"ptr", DllStructGetPtr($Output), _
													"uint*", $MaxBuffer)

	Return BinaryMid(DllStructGetData($Output, 1), 1, $Ret[5])
EndFunc

Func _MiniLZO_Compress($Data)
	If Not IsDllStruct($_MiniLZO_CodeBuffer) Then _MiniLZO_Startup()

	$Data = Binary($Data)
	Local $InputLen = BinaryLen($Data)
	Return BinaryMid(Binary($InputLen), 1, 4) & _MiniLZO_Compress_Core($Data)
EndFunc

Func _MiniLZO_Decompress($Data)
	If Not IsDllStruct($_MiniLZO_CodeBuffer) Then _MiniLZO_Startup()

	$Data = Binary($Data)
	Local $OutputLen = Int(BinaryMid($Data, 1, 4))
	Return _MiniLZO_Decompress_Core(BinaryMid($Data, 5), $OutputLen)
EndFunc

Func _MiniLZO_CodeDecompress($Code)
	If @AutoItX64 Then
		Local $Opcode = '0x
	Else
		Local $Opcode = '0x
	EndIf
	Local $AP_Decompress = (StringInStr($Opcode, "89C0") - 3) / 2
	Local $B64D_Init = (StringInStr($Opcode, "89D2") - 3) / 2
	Local $B64D_DecodeData = (StringInStr($Opcode, "89F6") - 3) / 2
	$Opcode = Binary($Opcode)

	Local $CodeBufferMemory = _MemVirtualAlloc(0, BinaryLen($Opcode), $MEM_COMMIT, $PAGE_EXECUTE_READWRITE)
	Local $CodeBuffer = DllStructCreate("byte[" & BinaryLen($Opcode) & "]", $CodeBufferMemory)
	DllStructSetData($CodeBuffer, 1, $Opcode)

	Local $B64D_State = DllStructCreate("byte[16]")
	Local $Length = StringLen($Code)
	Local $Output = DllStructCreate("byte[" & $Length & "]")

	DllCall("user32.dll", "none", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $B64D_Init, _
													"ptr", DllStructGetPtr($B64D_State), _
													"int", 0, _
													"int", 0, _
													"int", 0)

	DllCall("user32.dll", "int", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $B64D_DecodeData, _
													"str", $Code, _
													"uint", $Length, _
													"ptr", DllStructGetPtr($Output), _
													"ptr", DllStructGetPtr($B64D_State))

	Local $ResultLen = DllStructGetData(DllStructCreate("uint", DllStructGetPtr($Output)), 1)
	Local $Result = DllStructCreate("byte[" & ($ResultLen + 16) & "]")

	Local $Ret = DllCall("user32.dll", "uint", "CallWindowProc", "ptr", DllStructGetPtr($CodeBuffer) + $AP_Decompress, _
													"ptr", DllStructGetPtr($Output) + 4, _
													"ptr", DllStructGetPtr($Result), _
													"int", 0, _
													"int", 0)


	_MemVirtualFree($CodeBufferMemory, 0, $MEM_RELEASE)
	Return BinaryMid(DllStructGetData($Result, 1), 1, $Ret[0])
EndFunc
